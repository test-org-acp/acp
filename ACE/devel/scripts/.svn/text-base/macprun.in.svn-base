#!@PYTHON@
#
# Copyright (c) 2014      Kyushu University 
# Copyright (c) 2014      Institute of Systems, Information Technologies 
#                         and Nanotechnologies 2014
# Copyright (c) 2014      FUJITSU LIMITED
#
# This software is released under the BSD License, see LICENSE. 
#
# This script is supported by python2.6, 2.7, 3.3, or 3.4.
#

import os, sys, socket, re, copy, time

ENVNETWORK       = "@NETDEV@"
REMOTESHELL      = "ssh"

VERSION          = "@VERSION@"
STARTER_MEMSIZE  = 1024
STARTER_MEMSIZE_CL = 1024
STARTER_MEMSIZE_DL = 1024
PORTID_START     = 44256
TASKID           = 100
LST_ENVNETWORK   = [ "UDP", "udp", "INFINIBAND", "inifiniband", "IB", "ib", "TOFU", "tofu" ]
STR_ENVNETWORK   = "ACP_ENVNET"
STR_ENVMYRANK    = "ACP_MYRANK"
STR_ENVLPORT     = "ACP_LPORT"
STR_ENVRPORT     = "ACP_RPORT"
STR_ENVRHOST     = "ACP_RHOST"
STR_ENVNPROCS    = "ACP_NUMPROCS"
STR_ENVSMSIZE    = "ACP_STARTER_MEMSIZE"
STR_ENVTASKID    = "ACP_TASKID"
STR_PORTFILEBASE = "Portfile"
STR_NODEFILEBASE = "Nodefile"
#
STR_COMM_ACPRUN  = "acprun"


DEBUG_MODE       = False ## or True
DEBUG_LEVEL      = 1000  ## change to >200
####
EXECUTE_COMMAND  = True  ## False
####

OPTDEF = [ [ "-n",                    "NPROCS",     "BLKVAL" ],
           [ "-np",                   "NPROCS",     "BLKVAL" ],
           [ "--acp-n",               "NPROCS",     "EQVAL"  ],
           [ "--acp-np",              "NPROCS",     "EQVAL"  ],
           [ "--acp-nprocs" ,         "NPROCS",     "EQVAL"  ],
           #
           [ "-smemsize",             "STARTERMEM", "BLKVAL" ],
           [ "-startermemsize",       "STARTERMEM", "BLKVAL" ],
           [ "--acp-smemsize",        "STARTERMEM", "EQVAL"  ],
           [ "--acp-startermemsize",  "STARTERMEM", "EQVAL"  ],
           #
           [ "-smemsize-cl",             "STARTERMEM_CL", "BLKVAL" ],
           [ "-startermemsize-cl",       "STARTERMEM_CL", "BLKVAL" ],
           [ "--acp-smemsize-cl",        "STARTERMEM_CL", "EQVAL"  ],
           [ "--acp-startermemsize-cl",  "STARTERMEM_CL", "EQVAL"  ],
           #
           [ "-smemsize-dl",             "STARTERMEM_DL", "BLKVAL" ],
           [ "-startermemsize-dl",       "STARTERMEM_DL", "BLKVAL" ],
           [ "--acp-smemsize-dl",        "STARTERMEM_DL", "EQVAL"  ],
           [ "--acp-startermemsize-dl",  "STARTERMEM_DL", "EQVAL"  ],
           #
           [ "-machinefile",          "NODEFILE",   "BLKVAL" ],
           [ "-nodefile",             "NODEFILE",   "BLKVAL" ],
           [ "--acp-machinefile",     "NODEFILE",   "EQVAL"  ],
           [ "--acp-nodefile",        "NODEFILE",   "EQVAL"  ],
           #
           [ "-host",                 "NODES",      "BLKVAL" ],
           [ "-node",                 "NODES",      "BLKVAL" ],
           [ "--acp-host",            "NODES",      "EQVAL"  ],
           [ "--acp-node",            "NODES",      "EQVAL"  ],
           #
           [ "-net",                  "ENVNET",     "BLKVAL" ],
           [ "-ndev",                 "ENVNET",     "BLKVAL" ],
           [ "-envnet",               "ENVNET",     "BLKVAL" ],
           [ "--acp-net",             "ENVNET",     "EQVAL"  ],
           [ "--acp-envnet",          "ENVNET",     "EQVAL"  ],
           #
           [ "-h",                    "HELP",       "NONE"   ],
           [ "-help",                 "HELP",       "NONE"   ],
           [ "--acp-help",            "HELP",       "NONE"   ],
           #
           [ "-debug",                "DEBUG",      "NONE"   ],
           [ "--acp-debug",           "DEBUG",      "NONE"   ],
            #
           [ "-v",                    "VERSION",    "NONE"   ],
           [ "-version",              "VERSION",    "NONE"   ],
           [ "--acp-version",         "VERSION",    "NONE"   ],
           #
           [ "--acp-",                "ERROR",      "NONE"   ] ]

#########################################################
#########################################################
#########################################################
class ErrorInvalidOption( RuntimeError ):
    def __init__( self, value ):
        self.value = value
    def __str__( self ):
        return repr( self.value )

class ErrorInvalidOptionArgument( RuntimeError ):
    def __init__( self, value ):
        self.value = value
    def __str__( self ):
        return repr( self.value )

#########################################################
#########################################################
#########################################################
class MAcprun:
    # variables
    # myname, starter_memsize, nprocs, lst_taskid, nodefile, cwd,
    # lst_lport, lst_rport, ip, lst_rhostip, lst_lhost,
    # flg_localmode, flg_envnetwork, comm_args, comms_ssh

    #########################################################
    def __init__( self, envnetwork = LST_ENVNETWORK[ 0 ] ):
        self.myname          = os.path.basename( sys.argv[ 0 ] )
        self.ver_python      = int( sys.version_info[ 0 ] )
        self.subver_python   = int( sys.version_info[ 1 ] )
        self.starter_memsize = STARTER_MEMSIZE
        self.starter_memsize_cl = STARTER_MEMSIZE_CL
        self.starter_memsize_dl = STARTER_MEMSIZE_DL
        self.nprocs_total    = 0
        self.nprocs_acp      = 0
        self.nprocs_mpi      = 0
        self.flg_reset_nprocs_total = False
        self.lst_taskid      = [ TASKID ]
        self.nodefile        = ""
        self.nodes           = []
        self.cwd             = os.getcwd()
        self.lst_lport       = PORTID_START
        self.lst_rport       = PORTID_START
        self.lst_lhostip     = [ "127.0.0.1" ]
        self.lst_rhostip     = [ "127.0.0.1" ]
        self.lst_lhost       = [ "localhost" ]
        self.lst_rhost       = [ "localhost" ]
        self.flg_localmode   = True
        self.flg_debug_mode  = DEBUG_MODE
        self.flg_debug_level = DEBUG_LEVEL
        self.set_envnetwork( envnetwork )
        self.lst_for_gen_lst_lport = { }
        if (( self.ver_python < 2 ) or (( self.ver_python == 2 ) and ( self.subver_python < 6 ))):
            sys.exit( "Error: %s requires python (2.6 <= version <= 3.x).\nCurrent version: %s." % (self.myname, sys.version) )

    #########################################################
    def set_envnetwork( self, _envnetwork ):
        for i in range( len(LST_ENVNETWORK) ):
            if (LST_ENVNETWORK[ i ] == _envnetwork):
                self.flg_envnetwork = _envnetwork
                return
        self.error_not_supported_network( _envnetwork )
        sys.exit( "Error" )

    #########################################################
    def error_not_supported_network( self, envnetwork ):
        #print "Network %s: not supported.\n" % envnetwork
        print( "Network %s: not supported.\n" % envnetwork )
        sys.exit( "Error" )

    #########################################################
    def print_help( self ):
        print( "%s [Opts] Inputfile" % self.myname )
        print( "Opts: -np NPROCS                          or --acp-nprocs=NPROCS                      (default: 1)" )
        print( "    : -nodefile NODEFILENAME              or --acp-nodefile=NODEFILENAME              (default: calc inside 1 node)" )
        print( "    : -host HOST1,HOST2,...               or --acp-host=HOST1,HOST2,...               (default: host value overwrites nodefile info.) " )
        print( "    : -startermemsize STARTER_MEMORY_SIZE or --acp-startermemsize=STARTER_MEMORY_SIZE (default: %d Bytes) " % STARTER_MEMSIZE )
        print( "    : -startermemsize-cl STARTER_MEMORY_SIZE_CL or --acp-startermemsize-cl=STARTER_MEMORY_SIZE_CL (default: %d Bytes) " % STARTER_MEMSIZE_CL )
        print( "    : -startermemsize-dl STARTER_MEMORY_SIZE_DL or --acp-startermemsize-dl=STARTER_MEMORY_SIZE_DL (default: %d Bytes) " % STARTER_MEMSIZE_DL )
        print( "    : -net/-ndev/-envnet ENVNETWORK       or --acp-envnet=ENVNETWORK                  (default: %s. specify UDP or IB)" % ENVNETWORK )
        print( "    : --acp-version" )
        print( "    : --acp-help" )
        print( "Memo: 1. Other --acp-* options are errors." )
        print( "    : 2. All options for %s have to be before inputfile." % self.myname )
        sys.exit( "" )

    #########################################################
    def parse_anarg( self, args, pos ): ### private
        #print args[ pos ], args[ pos + 1 ]
        flgopt = "ERROR"
        flgval = "NONE"
        optarg = "NONE"
        optval = args[ pos ]
        pnext  = pos + 1
        # 
        if ( args[ pos ][ 0 ] == "-" ):
            for i in range( len( OPTDEF ) ):
                str = args[ pos ].split( "=" )[ 0 ]
                #print args[ pos ], str
                if ( str == OPTDEF[ i ][ 0 ] ):
                    flgopt = OPTDEF[ i ][ 1 ]
                    flgval = OPTDEF[ i ][ 2 ]
                    if ( flgval == "BLKVAL" ):
                        if ( len( args ) <= pos + 1 ):
                            raise ErrorInvalidOptionArgument
                        optarg = args[ pos + 1 ]
                        pnext  = pos + 2
                    else:
                        optarg = ""
                        lst_args = args[ pos ].split( "=" )
                        if len( lst_args ) > 1:
                            optval = lst_args[ 1 ]
                        else:
                            optval = []
                        pnext  = pos + 1
                    return [ flgopt, flgval, optarg, optval, pnext ]
        else:
            flgopt = "NONE"
        return [ flgopt, flgval, optarg, optval, pnext ]

    #########################################################
    def parse_argv( self ):
        # 
        args = sys.argv
        self.comm_args = []
        self.nodes     = []
        pos = 1    
        try:
            while pos < len(args):
                flgopt, flgval, optarg, optval, pos = self.parse_anarg( args, pos )
                #if DEBUG_MODE:
                #    if DEBUG_LEVEL > 200:
                #        print "opt: ", "flgopt=",flgopt, "flgval=",flgval, "optarg=",optarg, "optval=",optval, "pos=",pos
                #
                if ( flgopt == "NONE" ):
                    self.comm_args.append( optval )
                    while pos < len( args ):
                        self.comm_args.append( args[ pos ] )
                        pos += 1
                    break
                elif flgopt == "NPROCS":
                    self.flg_reset_nprocs_total = True
                    if   flgval == "BLKVAL":
                        self.nprocs_total      = int( optarg )
                    elif flgval == "EQVAL":
                        self.nprocs_total      = int( optval )
                    if self.nprocs_total      <= 0:
                        raise ErrorInvalidOptionArgument( "Argument: np <= 0" )
                elif flgopt == "STARTERMEM":
                    if   flgval == "BLKVAL":
                        self.starter_memsize = int( optarg )
                    elif flgval == "EQVAL":
                        self.starter_memsize = int( optval )
                    if self.starter_memsize < 0:
                        raise ErrorInvalidOptionArgument( "Argument: startermemsize < 0" )
                elif flgopt == "STARTERMEM_CL":
                    if   flgval == "BLKVAL":
                        self.starter_memsize_cl = int( optarg )
                    elif flgval == "EQVAL":
                        self.starter_memsize_cl = int( optval )
                    if self.starter_memsize_cl < 0:
                        raise ErrorInvalidOptionArgument( "Argument: startermemsize_cl < 0" )
                elif flgopt == "STARTERMEM_DL":
                    if   flgval == "BLKVAL":
                        self.starter_memsize_dl = int( optarg )
                    elif flgval == "EQVAL":
                        self.starter_memsize_dl = int( optval )
                    if self.starter_memsize_dl < 0:
                        raise ErrorInvalidOptionArgument( "Argument: startermemsize_dl < 0" )
                elif flgopt == "NODEFILE":
                    self.flg_localmode       = False
                    if   flgval == "BLKVAL":
                        self.nodefile        = optarg
                    elif flgval == "EQVAL":
                        self.nodefile        = optval
                    if self.nodefile        == "":
                        raise ErrorInvalidOptionArgument( "Argument: nodefile name is null" )
                elif flgopt == "NODES":
                    self.flg_localmode       = False
                    if   flgval == "BLKVAL":
                        nodes                = optarg
                    elif flgval == "EQVAL":
                        nodes                = optval
                    self.nodes               = nodes.split( "," )
                    if self.nodes           == "":
                        raise ErrorInvalidOptionArgument( "Argument: host names are null" )
                elif flgopt == "ENVNET":
                    if   flgval == "BLKVAL":
                        self.flg_envnetwork  = optarg
                    elif flgval == "EQVAL":
                        self.flg_envnetwork  = optval
                    if self.flg_envnetwork  == "":
                        raise ErrorInvalidOptionArgument( "Argument: ENVNET value is null" )
                elif flgopt == "HELP":
                    self.print_help()
                    sys.stderr.exit( "help:" )
                elif flgopt == "VERSION":
                    print( "%s : version %s." % (self.myname, VERSION) )
                    sys.exit( "" )
                elif flgopt == "DEBUG":
                    self.flg_debug_mode = True
                elif flgopt == "ERROR":
                    raise ErrorInvalidOption( "Argument: invalid" )
                else:
                    raise ErrorInvalidOption( "Argument: invalid" )
        except ErrorInvalidOption:
            print("Error: invalid option: %s" % args)
            sys.exit( "" )
        except ErrorInvalidOptionArgument:
            print("Error: invalid option argument: %s" % args)
            sys.exit( "" )
        if self.flg_debug_mode:
            if self.flg_debug_level > 200:
                print( "In " + sys._getframe().f_code.co_name + "():" )
                print("opt: ", "NPROCS   = ", self.nprocs_total)
                print("opt: ", "SMEMSZ   = ", self.starter_memsize)
                print("opt: ", "SMEMSZ_CL= ", self.starter_memsize_cl)
                print("opt: ", "SMEMSZ_DL= ", self.starter_memsize_dl)
                print("opt: ", " NODES   = ", self.nodes)
                print("opt: ", "ENVNET   = ", self.flg_envnetwork)
                print("opt: ", "COMARG   = ", self.comm_args)
#
    #########################################################
    def set_taskid( self ):
        self.lst_taskid = []
        for i in range( self.nprocs_total ):
            self.lst_taskid.append( TASKID )

    #########################################################
    def read_nodenames( self ):
        self.lst_nodename = []
        if ( len( self.nodefile ) <= 0 ):
            for i in range( self.nprocs_total ):
                self.lst_nodename.append( "localhost" )
                self.flg_localmode = True
        else:
            try:
                if self.nodes:
                    self.lst_nodename = copy.deepcopy( self.nodes )
                else:
                    f = open( self.nodefile )
                    lines = f.readlines()
                    f.close()
                for nodename in lines:
                    nodename = nodename.rstrip()
                    self.lst_nodename.append( nodename )
            #
            except RuntimeError:
                print( "%s: error, while processing nodefile %s" % self.myname, self.nodefile )
                sys.exit( "" )

    #########################################################
    def resolv_nodenames( self ):
        self.lst_nodeip = []
        for nodename in self.lst_nodename:
            if ( len( self.nodefile ) <= 0 ):
                self.lst_nodeip.append( "127.0.0.1" )
            else:
                self.lst_nodeip.append( socket.gethostbyname( nodename ) )
        if self.flg_debug_mode:
            if self.flg_debug_level > 200:
                print( "In " + sys._getframe().f_code.co_name + "():" )
                print( "lst_nodeip:", self.lst_nodeip )

    #########################################################
    def mult_nodenames( self ):
        self.lst_lhost    = []
        self.lst_lhostip  = []
        ip = 0
        while ip < self.nprocs_total:
            ipmod = ip % len( self.lst_nodename )
            self.lst_lhost.append(   self.lst_nodename[ ipmod ] )
            self.lst_lhostip.append( self.lst_nodeip[   ipmod ] )
            ip += 1
        if self.flg_debug_mode:
            if self.flg_debug_level > 200:
                print( "In " + sys._getframe().f_code.co_name + "():" )
                print( "lst_lhost:",   self.lst_lhost )
                print( "lst_lhostip:", self.lst_lhostip )

    #########################################################
    def get_array_lport( self ):
        self.lst_lport = []
        for node in range( self.nprocs_total ):
            flg = False
            if self.ver_python == 2:
                flg = self.lst_for_gen_lst_lport.has_key( self.lst_lhostip[ node ] )
            elif self.ver_python == 3:
                flg = self.lst_lhostip[ node ] in self.lst_for_gen_lst_lport
            else:
                sys.exit( "Python version error.: %s", sys.version )
            # 
            if flg:
                ip = self.lst_for_gen_lst_lport[ self.lst_lhostip[ node ] ]
                self.lst_lport.append( ip + 1 )
                self.lst_for_gen_lst_lport[ self.lst_lhostip[ node ] ] = ip + 1
            else:
                self.lst_lport.append( PORTID_START )
                self.lst_for_gen_lst_lport[ self.lst_lhostip[ node ] ] = PORTID_START

    #########################################################
    def get_array_rport_rhostip( self ):
        if   ( self.flg_envnetwork == "UDP"        ) or ( self.flg_envnetwork == "udp"  ):
            self.get_array_rport_rhostip_udp()
        elif ( self.flg_envnetwork == "INFINIBAND" ) or ( self.flg_envnetwork == "IB"   ) or \
             ( self.flg_envnetwork == "infiniband" ) or ( self.flg_envnetwork == "ib"   ):
            self.get_array_rport_rhostip_ib()
        elif ( self.flg_envnetwork == "TOFU"       ) or ( self.flg_envnetwork == "tofu" ):
            self.get_array_rport_rhostip_tofu()
        else:
            print( "Error: %s: Network %s: not supported.\n" % self.myname, self.flg_envnetwork )
            sys.exit( "" )

    #########################################################
    def get_array_rport_rhostip_udp( self ):
        self.lst_rport   = []
        self.lst_rhost   = []
        self.lst_rhostip = []
        for i in range( self.nprocs_total ):
            self.lst_rport.append( 0 )
            self.lst_rhost.append( "" )
            self.lst_rhostip.append( "" )
        for node in range( self.nprocs_total ):
            if self.ver_python == 2:
                self.lst_rport[ node ]   = self.lst_lport  [ node / 2 ]
                self.lst_rhost[ node ]   = self.lst_lhost  [ node / 2 ]
                self.lst_rhostip[ node ] = self.lst_lhostip[ node / 2 ]
            elif self.ver_python == 3:
                self.lst_rport[ node ]   = self.lst_lport  [ node // 2 ]
                self.lst_rhost[ node ]   = self.lst_lhost  [ node // 2 ]
                self.lst_rhostip[ node ] = self.lst_lhostip[ node // 2 ]
            else:
                sys.exit( "%s: python version error.: %s", (self.myname, sys.version) )
        if self.flg_debug_mode:
            if self.flg_debug_level > 200:
                print( "In " + sys._getframe().f_code.co_name + "():" )
                print( "lst_rpost:",   self.lst_rport )
                print( "lst_rhost:",   self.lst_rhost )
                print( "lst_rhostip:", self.lst_rhostip )

    #########################################################
    def get_array_rport_rhostip_ib( self ):
        self.lst_rport   = []
        self.lst_rhost   = []
        self.lst_rhostip = []
        for node in range( self.nprocs_total-1 ):
            self.lst_rport.append(   self.lst_lport  [ node + 1 ] )
            self.lst_rhost.append(   self.lst_lhost  [ node + 1 ] )
            self.lst_rhostip.append( self.lst_lhostip[ node + 1 ] )
        self.lst_rport.append(   self.lst_lport  [ 0 ] )
        self.lst_rhost.append(   self.lst_lhost  [ 0 ] )
        self.lst_rhostip.append( self.lst_lhostip[ 0 ] )
        if self.flg_debug_mode:
            if self.flg_debug_level > 200:
                print( "In " + sys._getframe().f_code.co_name + "():" )
                print( "lst_rpost:",   self.lst_rport )
                print( "lst_rhost:",   self.lst_rhost )
                print( "lst_rhostip:", self.lst_rhostip )

    #########################################################
    def get_array_rport_rhostip_tofu( self ):
        error_not_supported_network( self.flg_envnetwork )

    ###############################################################################
    ###############################################################################
    ###############################################################################
    def read_inputfile( self ):
        lines = []
        if len( self.comm_args ) == 0:
            lines = sys.stdin.readlines()
        else:
            filename = self.comm_args[ 0 ]
            fp = open( filename )
            lines = fp.readlines()
            fp.close
        pat = re.compile( "^[ ]*#|^[ ]*$" )
        self.lines_input = []
        for i in range( len(lines) ):
            lines[ i ] = lines[ i ].rstrip()
            if (not pat.match( lines[ i ] )):
                str = re.sub( "[ ]*#.*$", "", lines[ i ] )
                self.lines_input.append( str )
        if self.flg_debug_mode:
            if self.flg_debug_level > 200:
                print( "In " + sys._getframe().f_code.co_name + "():" )
                print( "inputfile: ", self.lines_input )

    #####################################
    def parse_inputfile( self ):
        il = 0
        self.num_runtime = int( self.lines_input[ il ] )
        il += 1
        #
        self.runtimes = []
        for i in range( self.num_runtime ):
            self.runtimes.append( self.lines_input[ il ] )
            il += 1
        # 
        self.nprocs_mpi = 0
        self.nprocs = []
        self.offsets_rank = []
        for i in range( self.num_runtime ):
            self.nprocs.append( int(self.lines_input[ il ]) )
            self.nprocs_mpi += self.nprocs[ i ]
            if ( i == 0 ):
                self.offsets_rank.append( 0 )
            else:
                self.offsets_rank.append( self.nprocs[ i - 1 ] + self.offsets_rank[ i - 1 ] )
            il += 1
        #
        if (self.flg_reset_nprocs_total and (self.nprocs_mpi > self.nprocs_total)):
            str = "Error: %s: Inputfile total nprocs > Argument nprocs: " % self.myname + \
            "%s => %d > %d" % (self.nprocs, self.nprocs_mpi, self.nprocs_total)
            sys.exit( str )
        if ( self.flg_reset_nprocs_total == False ):
            self.nprocs_total = self.nprocs_mpi
        #
        self.nprocs_acp = self.nprocs_total - self.nprocs_mpi
        #
        self.idruntime = []
        for i in range( self.num_runtime ):
            for ip in range( self.nprocs[ i ] ):
                self.idruntime.append( i )
        #
        self.commands = []
        for i in range( self.num_runtime ):
            self.commands.append( self.lines_input[ il ] )
            il += 1
        #
        if self.flg_debug_mode:
            if self.flg_debug_level > 200:
                print( "In " + sys._getframe().f_code.co_name + "():" )
                print( "input: ", "num_runtime  = ", self.num_runtime )
                print( "input: ", "runtimes     = ", self.runtimes )
                print( "input: ", "nprocs_mpi   = ", self.nprocs_mpi )
                print( "input: ", "nprocs_acp   = ", self.nprocs_acp )
                print( "input: ", "nprocs       = ", self.nprocs )
                print( "input: ", "offsets_rank = ", self.offsets_rank )
                print( "input: ", "idruntime    = ", self.idruntime )
                print( "input: ", "commands     = ", self.commands )
    
    #####################################
    def gen_intermediate_files( self ):
        pid            = os.getpid()
        self.portfile  = "%s.%d" % (STR_PORTFILEBASE, pid)
        self.nodefiles = []
        for i in range( self.num_runtime ):
            self.nodefiles.append( "%s.%d.%d" % (STR_NODEFILEBASE, pid, i) )
        #
        # portfile
        oport = open( self.portfile, "w" )
        for ip in range( self.nprocs_total ):
            str = "%10s %10s %20s %20s %20s    %20s %20s %20s   %s %s %s\n" % \
                 ( ip, self.nprocs_total, self.lst_lport[ ip ], self.lst_rport[ ip ], self.lst_rhostip[ ip ], \
                   self.starter_memsize, self.starter_memsize_cl, self.starter_memsize_dl, \
                   self.lst_taskid[ ip ], self.lst_lhostip[ ip ], self.lst_lhost[ ip ] )
            oport.write( str )
        oport.close()
        #
        # nodefiles
        id = 0
        for i in range( self.num_runtime ):
            oport = open( self.nodefiles[ i ], "w" )
            for ip in range( self.nprocs[ i ] ):
                oport.write( "%-20s\n" % self.lst_lhost[ id ] )
                id += 1
            oport.close()

    #####################################
    def print_intermediate_files( self ):
        print( self.myname + ": " + "Intermediate files:" )
        print( self.myname + ": " + self.portfile + ":" )
        iport = open( self.portfile )
        lines = iport.readlines()
        iport.close()
        for i in range( len(lines) ):
            print( self.myname + ": " + lines[ i ].rstrip() )
        for i in range( self.num_runtime ):
            print( self.myname + ": " + self.nodefiles[ i ] + ":" )
            iport = open( self.nodefiles[ i ] )
            lines = iport.readlines()
            iport.close()
            for i in range( len(lines) ):
                print( self.myname + ": " + lines[ i ].rstrip() )

    #####################################
    def gen_runtime_commands( self ):
        self.comms_runtime = []
        for i in range( self.num_runtime ):
            basename_comm_opts = os.path.basename( self.runtimes[ i ] )
            basename_comm = basename_comm_opts.split()[ 0 ]
            if ( basename_comm == STR_COMM_ACPRUN ):
                if ( self.flg_localmode ):
                    self.comms_runtime.append(
                                "%s --acp-nprocs=%d --acp-portfile=%s --acp-offsetrank=%d %s" % \
                                ( self.runtimes[ i ], self.nprocs[ i ], self.portfile, self.offsets_rank[ i ] , self.commands[ i ] ) )
                else:
                    self.comms_runtime.append(
                                "%s --acp-nprocs=%d --acp-portfile=%s --acp-offsetrank=%d %s" % \
                                ( self.runtimes[ i ], self.nprocs[ i ], self.portfile, self.offsets_rank[ i ] , self.commands[ i ] ) )
            else:
                if ( self.flg_localmode ):
                    self.comms_runtime.append(
                                "%s -np %d %s --acp-portfile %s --acp-offsetrank %d" % \
                                ( self.runtimes[ i ], self.nprocs[ i ], \
                                  self.commands[ i ], self.portfile, self.offsets_rank[ i ] ) )
                else:
                    self.comms_runtime.append(
                                "%s -np %d -machinefile %s %s --acp-portfile %s --acp-offsetrank %d" % \
                                ( self.runtimes[ i ], self.nprocs[ i ], self.nodefiles[ i ], \
                                  self.commands[ i ], self.portfile, self.offsets_rank[ i ] ) )
            if ( i != (self.num_runtime-1) ):
                self.comms_runtime[ i ] += " &"

    #########################################################
    def exec_runtime_commands( self ):
        for i in range( self.num_runtime ):
            os.system( self.comms_runtime[ i ] )

###############################################################################
###############################################################################
###### MAIN ###################################################################
###############################################################################
###############################################################################
ma = MAcprun()

ma.parse_argv()
ma.read_inputfile()
ma.parse_inputfile()
#
ma.set_taskid()
ma.read_nodenames()
ma.resolv_nodenames()
ma.mult_nodenames()
ma.get_array_lport()
ma.get_array_rport_rhostip()
#
ma.gen_intermediate_files()
if ma.flg_debug_mode:
    ma.print_intermediate_files()
#
ma.gen_runtime_commands()
if ma.flg_debug_mode:
    print( ma.myname + ": " + "Executed commands:" )
    for i in range( len( ma.comms_runtime ) ):
        print( ma.myname + ": " +  ma.comms_runtime[ i ] )
#
time.sleep( 1 )
if EXECUTE_COMMAND:
    ma.exec_runtime_commands()
