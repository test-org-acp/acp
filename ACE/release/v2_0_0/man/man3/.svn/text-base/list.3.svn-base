.TH "list" 3 "Thu Jun 2 2016" "Version 2.0.0" "ACP Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
list \- ACP Middle Layer Dara Library List
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBacp_list_t\fP"
.br
.ti -1c
.RI "struct \fBacp_list_it_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBacp_assign_list\fP (\fBacp_list_t\fP list1, \fBacp_list_t\fP list2)"
.br
.RI "\fIList type data assignment\&. \fP"
.ti -1c
.RI "void \fBacp_assign_range_list\fP (\fBacp_list_t\fP list, \fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"
.br
.RI "\fIList assignment with range\&. \fP"
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_begin_list\fP (\fBacp_list_t\fP list)"
.br
.RI "\fIQuery for the head iterator of a list\&. \fP"
.ti -1c
.RI "void \fBacp_clear_list\fP (\fBacp_list_t\fP list)"
.br
.RI "\fIList elimination\&. \fP"
.ti -1c
.RI "\fBacp_list_t\fP \fBacp_create_list\fP (int rank)"
.br
.RI "\fIList creation\&. \fP"
.ti -1c
.RI "void \fBacp_destroy_list\fP (\fBacp_list_t\fP list)"
.br
.RI "\fIList destruction\&. \fP"
.ti -1c
.RI "int \fBacp_empty_list\fP (\fBacp_list_t\fP list)"
.br
.RI "\fIQuery for list empty\&. \fP"
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_end_list\fP (\fBacp_list_t\fP list)"
.br
.RI "\fIQuery for the tail iterator of a list\&. \fP"
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_erase_list\fP (\fBacp_list_it_t\fP it)"
.br
.RI "\fIErase a list element\&. \fP"
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_erase_range_list\fP (\fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"
.br
.RI "\fIDeletion of the list data from 'start' to 'end'\&. \fP"
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_insert_list\fP (\fBacp_list_it_t\fP it, const \fBacp_element_t\fP elem, int rank)"
.br
.RI "\fIInsert a list element\&. \fP"
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_insert_range_list\fP (\fBacp_list_it_t\fP it, \fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"
.br
.RI "\fIInsertion of the list data from 'start' to 'end'\&. \fP"
.ti -1c
.RI "void \fBacp_merge_list\fP (\fBacp_list_t\fP list1, \fBacp_list_t\fP list2, int(*comp)(const \fBacp_element_t\fP elem1, const \fBacp_element_t\fP elem2))"
.br
.RI "\fIList type data merge\&. \fP"
.ti -1c
.RI "void \fBacp_pop_back_list\fP (\fBacp_list_t\fP list)"
.br
.RI "\fIData deletion at the end of the list data\&. \fP"
.ti -1c
.RI "void \fBacp_pop_front_list\fP (\fBacp_list_t\fP list)"
.br
.RI "\fIData deletion at the head of the list data\&. \fP"
.ti -1c
.RI "void \fBacp_push_back_list\fP (\fBacp_list_t\fP list, const \fBacp_element_t\fP elem, int rank)"
.br
.RI "\fIInserts a list element at the tail of the list\&. \fP"
.ti -1c
.RI "void \fBacp_push_front_list\fP (\fBacp_list_t\fP list, const \fBacp_element_t\fP elem, int rank)"
.br
.RI "\fIInsert a list element at the head of the list\&. \fP"
.ti -1c
.RI "void \fBacp_remove_list\fP (\fBacp_list_t\fP list, const \fBacp_element_t\fP elem)"
.br
.RI "\fIErase a list\&. \fP"
.ti -1c
.RI "void \fBacp_reverse_list\fP (\fBacp_list_t\fP list)"
.br
.RI "\fIReconnect elements of a list in reverse sequence\&. \fP"
.ti -1c
.RI "size_t \fBacp_size_list\fP (\fBacp_list_t\fP list)"
.br
.RI "\fIQuery of the data size in the list\&. \fP"
.ti -1c
.RI "void \fBacp_sort_list\fP (\fBacp_list_t\fP list, int(*comp)(const \fBacp_element_t\fP elem1, const \fBacp_element_t\fP elem2))"
.br
.RI "\fISorting List type data\&. \fP"
.ti -1c
.RI "void \fBacp_splice_list\fP (\fBacp_list_it_t\fP it1, \fBacp_list_it_t\fP it2)"
.br
.RI "\fISplice list type data\&. \fP"
.ti -1c
.RI "void \fBacp_splice_range_list\fP (\fBacp_list_it_t\fP it, \fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"
.br
.RI "\fISpilice list with range\&. \fP"
.ti -1c
.RI "void \fBacp_swap_list\fP (\fBacp_list_t\fP list1, \fBacp_list_t\fP list2)"
.br
.RI "\fISwap list type data\&. \fP"
.ti -1c
.RI "void \fBacp_unique_list\fP (\fBacp_list_t\fP list)"
.br
.RI "\fIUnique list type data\&. \fP"
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_advance_list_it\fP (\fBacp_list_it_t\fP it, int n)"
.br
.RI "\fIAdvancement of an iterator for list type data\&. \fP"
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_decrement_list_it\fP (\fBacp_list_it_t\fP it)"
.br
.RI "\fIDecrement an iterater of a list data\&. \fP"
.ti -1c
.RI "\fBacp_element_t\fP \fBacp_dereference_list_it\fP (\fBacp_list_it_t\fP it)"
.br
.RI "\fIQuery of the global address of a reference of list tyep iterator\&. \fP"
.ti -1c
.RI "int \fBacp_distance_list_it\fP (\fBacp_list_it_t\fP first, \fBacp_list_it_t\fP last)"
.br
.RI "\fIQuery of the distance of two iterators of list type data between 'first' and 'last'\&. \fP"
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_increment_list_it\fP (\fBacp_list_it_t\fP it)"
.br
.RI "\fIIncrement an iterater of a list data\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
ACP Middle Layer Dara Library List 
.SH "Function Documentation"
.PP 
.SS "\fBacp_list_it_t\fP acp_advance_list_it (\fBacp_list_it_t\fP it, int n)"

.PP
Advancement of an iterator for list type data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIit\fP The iterator of list type data 
.br
\fIn\fP The number for advancing 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI\fBacp_list_it_t\fP\fP The advanced iterator of list type data 
.RE
.PP

.SS "void acp_assign_list (\fBacp_list_t\fP list1, \fBacp_list_t\fP list2)"

.PP
List type data assignment\&. Copy list type data between two lists\&.
.PP
\fBParameters:\fP
.RS 4
\fIlist1\fP A reference of destination list data\&. 
.br
\fIlist2\fP A reference of source list data\&. 
.RE
.PP

.SS "void acp_assign_range_list (\fBacp_list_t\fP list, \fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"

.PP
List assignment with range\&. Copy list data from the point of 'start' to 'end'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of destination list data\&. 
.br
\fIstart\fP A list type data iterator for pointing the starting address 
.br
\fIend\fP A list type data iterator for pointing the end address 
.RE
.PP

.SS "\fBacp_list_it_t\fP acp_begin_list (\fBacp_list_t\fP list)"

.PP
Query for the head iterator of a list\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list type data\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fImember elem == ACP_GA_NULL\fP Fail 
.br
\fIotherwise\fP The head iterator of the list\&. 
.RE
.PP

.SS "void acp_clear_list (\fBacp_list_t\fP list)"

.PP
List elimination\&. Set the size of the list to be zero\&.
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list data\&. 
.RE
.PP

.SS "\fBacp_list_t\fP acp_create_list (int rank)"

.PP
List creation\&. Creates a list type data on any process\&.
.PP
\fBParameters:\fP
.RS 4
\fIrank\fP Rank number\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fImember ga == ACP_GA_NULL\fP Fail 
.br
\fIotherwise\fP A reference of created list data\&. 
.RE
.PP

.SS "\fBacp_list_it_t\fP acp_decrement_list_it (\fBacp_list_it_t\fP it)"

.PP
Decrement an iterater of a list data\&. Decrements an iterater of a list data\&.
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list type data\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fImember elem == ACP_GA_NULL\fP Fail 
.br
\fIotherwise\fP The previous iterator of the specified one\&. 
.RE
.PP

.SS "\fBacp_element_t\fP acp_dereference_list_it (\fBacp_list_it_t\fP it)"

.PP
Query of the global address of a reference of list tyep iterator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIit\fP The iterator of list type data 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIacp_ga_t\fP The global address of a reference of list type iterator 
.RE
.PP

.SS "void acp_destroy_list (\fBacp_list_t\fP list)"

.PP
List destruction\&. Destroies a list type data\&.
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list data\&. 
.RE
.PP

.SS "int acp_distance_list_it (\fBacp_list_it_t\fP first, \fBacp_list_it_t\fP last)"

.PP
Query of the distance of two iterators of list type data between 'first' and 'last'\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP The iterator for head 
.br
\fIlast\fP The iterator for end 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIint\fP The distance between 'first' and 'last' 
.RE
.PP

.SS "int acp_empty_list (\fBacp_list_t\fP list)"

.PP
Query for list empty\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list data\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP Empty 
.br
\fI0\fP There is a list data 
.RE
.PP

.SS "\fBacp_list_it_t\fP acp_end_list (\fBacp_list_t\fP list)"

.PP
Query for the tail iterator of a list\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list type data\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fImember elem == ACP_GA_NULL\fP Fail 
.br
\fIoterhwise\fP The iterator that points to the behind of the last element 
.RE
.PP

.SS "\fBacp_list_it_t\fP acp_erase_list (\fBacp_list_it_t\fP it)"

.PP
Erase a list element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIit\fP An iterator of list type data\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fImember elem == ACP_GA_NULL\fP Fail 
.br
\fIoterhwise\fP The iterator that points to the element which is immediately after the erased one\&. 
.RE
.PP

.SS "\fBacp_list_it_t\fP acp_erase_range_list (\fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"

.PP
Deletion of the list data from 'start' to 'end'\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstart\fP The iterator of list data to erase 
.br
\fIend\fP The iterator of just behind of the deleting list data 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI\fBacp_list_it_t\fP\fP The iterator of just behind of the deleted list data 
.RE
.PP

.SS "\fBacp_list_it_t\fP acp_increment_list_it (\fBacp_list_it_t\fP it)"

.PP
Increment an iterater of a list data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list type data\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fImember elem == ACP_GA_NULL\fP Fail 
.br
\fIotherwise\fP The next iterator of the specified one\&. 
.RE
.PP

.SS "\fBacp_list_it_t\fP acp_insert_list (\fBacp_list_it_t\fP it, const \fBacp_element_t\fP elem, int rank)"

.PP
Insert a list element\&. Copy an element to the specified process and inserts it into the specified position of the list\&.
.PP
\fBParameters:\fP
.RS 4
\fIit\fP An iterater of list type data\&. 
.br
\fIga\fP The global address of the data to be added\&. 
.br
\fIsize\fP Size of the data to be added\&. 
.br
\fIrank\fP Rank of the process in which the element is copied\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fImember elem == ACP_GA_NULL\fP Fail 
.br
\fIotherwise\fP The iterator that points to the inserted element\&. 
.RE
.PP

.SS "\fBacp_list_it_t\fP acp_insert_range_list (\fBacp_list_it_t\fP it, \fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"

.PP
Insertion of the list data from 'start' to 'end'\&. Copy deque data from the point of 'start' to 'end'\&.
.PP
\fBParameters:\fP
.RS 4
\fIit\fP An iterator of the point for inserting data 
.br
\fIstart\fP The iterator of head address of the data to insert 
.br
\fIend\fP The iterator of just behind address of the data to insert 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI\fBacp_list_it_t\fP\fP An iterator of head address of the inserted data 
.RE
.PP

.SS "void acp_merge_list (\fBacp_list_t\fP list1, \fBacp_list_t\fP list2, int(*)(const \fBacp_element_t\fP elem1, const \fBacp_element_t\fP elem2) comp)"

.PP
List type data merge\&. Merge two sorted list type data\&.
.PP
\fBParameters:\fP
.RS 4
\fIlist1\fP A reference of destination list data\&. 
.br
\fIlist2\fP A reference of source list data\&. 
.br
\fIcomp\fP A function which return (1) negative number when elem1 < elem2, (2) 0 when elem1 = elem2, (3) positive number when elem1 > elem2 
.RE
.PP

.SS "void acp_pop_back_list (\fBacp_list_t\fP list)"

.PP
Data deletion at the end of the list data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of the list type data to erase 
.RE
.PP

.SS "void acp_pop_front_list (\fBacp_list_t\fP list)"

.PP
Data deletion at the head of the list data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of the list type data to erase 
.RE
.PP

.SS "void acp_push_back_list (\fBacp_list_t\fP list, const \fBacp_element_t\fP elem, int rank)"

.PP
Inserts a list element at the tail of the list\&. Inserts a data with specified size into the tail of the list\&.
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list type data\&. 
.br
\fIelem\fP A reference of element to added 
.br
\fIrank\fP Rank of the process in which the element is copied\&. 
.RE
.PP

.SS "void acp_push_front_list (\fBacp_list_t\fP list, const \fBacp_element_t\fP elem, int rank)"

.PP
Insert a list element at the head of the list\&. Inserts a data with specified size into the head of the list\&.
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list type data\&. 
.br
\fIelem\fP A reference of element to add 
.br
\fIrank\fP Rank of the process in which the element is copied\&. 
.RE
.PP

.SS "void acp_remove_list (\fBacp_list_t\fP list, const \fBacp_element_t\fP elem)"

.PP
Erase a list\&. Remove matching elements in the list\&.
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list type data\&. 
.br
\fIelem\fP A reference of element to compare 
.RE
.PP

.SS "void acp_reverse_list (\fBacp_list_t\fP list)"

.PP
Reconnect elements of a list in reverse sequence\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of the list type data 
.RE
.PP

.SS "size_t acp_size_list (\fBacp_list_t\fP list)"

.PP
Query of the data size in the list\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A referenc of the list data 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIsize_t\fP The data size in the list 
.RE
.PP

.SS "void acp_sort_list (\fBacp_list_t\fP list, int(*)(const \fBacp_element_t\fP elem1, const \fBacp_element_t\fP elem2) comp)"

.PP
Sorting List type data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list data\&. 
.br
\fIcomp\fP A function which return (1) negative number when it1 < it2, (2) 0 when it1 = it2, (3) positive number when it1 > it2 
.RE
.PP

.SS "void acp_splice_list (\fBacp_list_it_t\fP it1, \fBacp_list_it_t\fP it2)"

.PP
Splice list type data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIit1\fP An iterator of list data where an element is inserting\&. 
.br
\fIit2\fP An iterator of list data whose element is extracted\&. 
.RE
.PP

.SS "void acp_splice_range_list (\fBacp_list_it_t\fP it, \fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"

.PP
Spilice list with range\&. Move list data from the point of 'start' to 'end' to another list\&.
.PP
\fBParameters:\fP
.RS 4
\fIit\fP A reference of destination list data\&. 
.br
\fIstart\fP A list type data iterator for pointing the starting address 
.br
\fIend\fP A list type data iterator for pointing the end address 
.RE
.PP

.SS "void acp_swap_list (\fBacp_list_t\fP list1, \fBacp_list_t\fP list2)"

.PP
Swap list type data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist1\fP A reference of list data to be swapped\&. 
.br
\fIlist2\fP Another reference of list data to be swapped\&. 
.RE
.PP

.SS "void acp_unique_list (\fBacp_list_t\fP list)"

.PP
Unique list type data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A reference of list data\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for ACP Library from the source code\&.
