#!@RUBY@
#
# Copyright (c) 2014      Kyushu University 
# Copyright (c) 2014      Institute of Systems, Information Technologies 
#                         and Nanotechnologies 2014
# Copyright (c) 2014      FUJITSU LIMITED
#
# This software is released under the BSD License, see LICENSE. 
#
# checked with ruby1.8.7, ruby1.9.3, ruby2.0.0, and ruby2.1.1
#

require 'resolv'

$envnetwork      = "@NETDEV@"
$remoteshell     = "ssh"

$version         = "@VERSION@"
$starter_memsize = 2048
$portid_start    = 44256
$taskid          = 100
$lst_envnetwork  = [ "UDP", "udp", "INFINIBAND", "inifiniband", "IB", "ib", "TOFU", "tofu" ]
$str_envnetwork  = "ACP_ENVNET"
$str_envmyrank   = "ACP_MYRANK"
$str_envlport    = "ACP_LPORT"
$str_envrport    = "ACP_RPORT"
$str_envrhost    = "ACP_RHOST"
$str_envnprocs   = "ACP_NUMPROCS"
$str_envsmsize   = "ACP_STARTER_MEMSIZE"
$str_envtaskid   = "ACP_TASKID"

$debug_mode      = false  # or true
$debug_level     = 10     # change to >200
####
$execute_command  = true ## false
#$execute_command = false
####

$opt_def = [ [ "-np",                   "NPROCS",     "BLKVAL" ], # only for first argument
             [ "--acp-nprocs=" ,        "NPROCS",     "EQVAL"  ],
             [ "--acp-nodefile=",       "NODEFILE",   "EQVAL"  ],
             [ "--acp-startermemsize=", "STARTERMEM", "EQVAL"  ],
             [ "--acp-envnet=",         "ENVNET",     "EQVAL"  ],
             [ "--help",                "HELP",       "NONE"   ], #[ "-h" , "HELP",    "NONE" ],
             [ "--version",             "VERSION",    "NONE"   ], #[ "-v" , "VERSION", "NONE" ],
             [ "--acp-",                "ERROR",      "NONE"   ] ]

class ErrorInvalidOption         < RuntimeError ; end
class ErrorInvalidOptionArgument < RuntimeError ; end

#########################################################
#########################################################
#########################################################
class Acprun
    attr_accessor :myname,       :starter_memsize, :nprocs,         :arr_taskid, :nodefile,  :cwd,
                  :arr_myrank,   :arr_lport,       :arr_rport,      :arr_rhost,  :mult,
                  :arr_nodename, :arr_nodeip,      :flg_envnetwork, :comm_args,  :comms_ssh
    # private
    #     :lst_for_gen_arr_lport, :flg_localmode

    #########################################################
    def initialize( envnetwork = $lst_envnetwork[ 0 ] )
        @myname = String.new( File.basename( $0 ) )
        @starter_memsize = $starter_memsize
        @nprocs = 1
        @flg_localmode = true
        set_envnetwork( envnetwork )
        @lst_for_gen_arr_lport = Hash.new
    end

    #########################################################
    def set_envnetwork( _envnetwork )
        if $lst_envnetwork.index( _envnetwork )
            @flg_envnetwork = _envnetwork
        else
            error_not_supported_network( _envnetwork )
            exit
        end
    end

    #########################################################
    def error_not_supported_network( envnetwork )
        $stderr.printf( "Network %s: not supported.\n", envnetwork )
        exit
    end

    #########################################################
    def print_help( port )
        port.printf( "%s [opts] command args\n", @myname )
        port.printf( "opts: -np NPROCS or --acp-nprocs=NPROCS        (default: 1. -np must be first argument)\n" )
        port.printf( "    : --acp-nodefile=NODEFILENAME              (default: calc inside 1 node)\n" )
        port.printf( "    : --acp-startermemsize=STARTER_MEMORY_SIZE (default: %d Bytes) \n", $starter_memsize )
        port.printf( "    : --acp-envnet=ENVNETWORK                  (default: %s. specify UDP or IB)\n", $envnetwork )
        port.printf( "    : --acp-version\n" )
        port.printf( "    : --acp-help\n" )
        port.printf( "    : other --acp-* options are judged as errors.\n" )
        exit
    end

    #########################################################
    def parse_anarg( arg ) ### private
        flgopt = ""
        flgval = ""
        optarg = ""
        for i in 0...$opt_def.length do
            reg_match = Regexp.new( "^" + $opt_def[ i ][ 0 ] )
            reg_subst = Regexp.new( "^" + $opt_def[ i ][ 0 ] + "(.*)$" ) 
            #printf( "\"%s\", %s, %s\n", arg, reg_match, reg_subst )
            if ( reg_match =~ arg ) then
                flgopt = $opt_def[ i ][ 1 ]
                flgval = $opt_def[ i ][ 2 ]
                optarg = arg.gsub( reg_subst, '\1' )
                break
            else
                flgopt = "NONE"
                flgval = "NONE"
                optarg = "NONE"
            end
        end
        return flgopt, flgval, optarg
    end

    #########################################################
    def parse_argv( )
        args = Marshal.load(Marshal.dump(ARGV))
        @comm_args = ""
        i = 0    
        begin
            while ( i < args.length ) do
                flg_opt, flg_val, optarg = parse_anarg( args[ i ] )
                if ( flg_opt == "NONE" ) then
                    @comm_args = @comm_args + " " + args[ i ]
                elsif ( flg_opt == "NPROCS" ) then        # -np VAL or --acp-nprocs=VAL
                    if ( flg_val == "EQVAL" ) then
                        np = optarg.to_i
                        if ( np <= 0 ) then raise ErrorInvalidOptionArgument ; end
                        @nprocs = np
                    elsif ( flg_val == "BLKVAL" ) then
                        if ( i == 0 ) then                # check -np starts from argv[ 0 ]
                            np = args[ i + 1 ].to_i
                            if ( np <= 0 ) then raise ErrorInvalidOptionArgument ; end
                            @nprocs = np
                            i = i + 1
                        else
                            flg_opt = "NONE"
                            flg_val = "NONE"
                            optarg  = "NONE"
                            @comm_args = @comm_args + " " + args[ i ]
                        end
                    else
                        raise ErrorInvalidOptionArgument
                    end
                elsif ( flg_opt == "STARTERMEM" ) then
                    size = optarg.to_i
                    if ( size <= 0 ) then raise ErrorInvalidOptionArgument ; end
                    @starter_memsize = size
                elsif ( flg_opt == "NODEFILE" ) then
                    file = optarg
                    if ( file == "" ) then  raise ErrorInvalidOptionArgument ; end
                    @nodefile = file
                elsif ( flg_opt == "ENVNET" ) then
                    en = optarg
                    if ( en == "" ) then  raise ErrorInvalidOptionArgument ; end
                    @flg_envnetwork = en
                elsif ( flg_opt == "HELP" ) then
                    print_help( $stderr )
                    $stderr.printf( "help:\n" )
                    exit
                elsif ( flg_opt == "VERSION" ) then
                    $stderr.printf( "%s : version %s.\n", @myname, $version )
                    exit
                elsif ( flg_opt == "ERROR" ) then
                    raise ErrorInvalidOption
                else
                    raise ErrorInvalidOption
                end
                if $debug_mode then
                    if $debug_level > 200 then
                        printf( "opt: %s, %s, %s, (%s)\n", flg_opt, flg_val, optarg, args[ i ] )
                    end
                end
    
                i = i + 1
            end
        rescue ErrorInvalidOption
            $stderr.printf( "Error: invalid option: %s\n", args[ i ] )
            exit
        rescue ErrorInvalidOptionArgument
            $stderr.printf( "Error: invalid option argument: %s\n", args[ i ] )
            exit
        rescue 
        end

        if @nodefile then
            @flg_localmode = false
        end
    end

    #########################################################
    def set_taskid
        @arr_taskid = []
        for i in 0...@nprocs
            @arr_taskid << $taskid
        end
    end

    #########################################################
    def read_nodenames
        @arr_nodename = []
        if @flg_localmode then
            for i in 0...@nprocs do
                @arr_nodename << "localhost"
            end
        else
            begin
                IO.foreach( @nodefile ) do
                    |nodename|
                    nodename.chop!
                    @arr_nodename << nodename
                end
            rescue RuntimeError
                $stderr.printf( "%s: error, while processing nodefile %s\n", @myname, @nodefile )
                exit
            end
        end
        #if ( @arr_nodename.length < @nprocs ) then
        #    $stderr.printf( "%s: error. lines of nodename < nprocs: %d < %d\n",
        #                    @myname, @arr_nodename.length, @nprocs )
        #    exit
        #end
        #p nodenames
    end

    #########################################################
    def resolv_nodenames
        @arr_nodeip = []
        @arr_nodename.each do |nodename|
        if @flg_localmode then
            @arr_nodeip << "127.0.0.1"
        else
            @arr_nodeip << Resolv.getaddress( nodename )
        end
        end
        #p nodeips
    end
    # private
    #     :lst_for_gen_arr_lport, :flg_localmode

    #########################################################
    def initialize( envnetwork = $lst_envnetwork[ 0 ] )
        @myname = String.new( File.basename( $0 ) )
        @starter_memsize = $starter_memsize
        @nprocs = 1
        @flg_localmode = true
        set_envnetwork( envnetwork )
        @lst_for_gen_arr_lport = Hash.new
    end

    #########################################################
    def set_envnetwork( _envnetwork )
        if $lst_envnetwork.index( _envnetwork )
            @flg_envnetwork = _envnetwork
        else
            error_not_supported_network( _envnetwork )
            exit
        end
    end

    #########################################################
    def error_not_supported_network( envnetwork )
        $stderr.printf( "Network %s: not supported.\n", envnetwork )
        exit
    end

    #########################################################
    def print_help( port )
        port.printf( "%s [opts] command args\n", @myname )
        port.printf( "opts: -np NPROCS or --acp-nprocs=NPROCS        (default: 1. -np must be first argument)\n" )
        port.printf( "    : --acp-nodefile=NODEFILENAME              (default: calc inside 1 node)\n" )
        port.printf( "    : --acp-startermemsize=STARTER_MEMORY_SIZE (default: %d Bytes) \n", $starter_memsize )
        port.printf( "    : --acp-envnet=ENVNETWORK                  (default: %s. specify UDP or IB)\n", $envnetwork )
        port.printf( "    : --acp-version\n" )
        port.printf( "    : --acp-help\n" )
        port.printf( "    : other --acp-* options are judged as errors.\n" )
        exit
    end

    #########################################################
    def parse_anarg( arg ) ### private
        flgopt = ""
        flgval = ""
        optarg = ""
        for i in 0...$opt_def.length do
            reg_match = Regexp.new( "^" + $opt_def[ i ][ 0 ] )
            reg_subst = Regexp.new( "^" + $opt_def[ i ][ 0 ] + "(.*)$" ) 
            #printf( "\"%s\", %s, %s\n", arg, reg_match, reg_subst )
            if ( reg_match =~ arg ) then
                flgopt = $opt_def[ i ][ 1 ]
                flgval = $opt_def[ i ][ 2 ]
                optarg = arg.gsub( reg_subst, '\1' )
                break
            else
                flgopt = "NONE"
                flgval = "NONE"
                optarg = "NONE"
            end
        end
        return flgopt, flgval, optarg
    end

    #########################################################
    def parse_argv( )
        args = Marshal.load(Marshal.dump(ARGV))
        @comm_args = ""
        i = 0    
        begin
            while ( i < args.length ) do
                flg_opt, flg_val, optarg = parse_anarg( args[ i ] )
                if ( flg_opt == "NONE" ) then
                    @comm_args = @comm_args + " " + args[ i ]
                elsif ( flg_opt == "NPROCS" ) then        # -np VAL or --acp-nprocs=VAL
                    if ( flg_val == "EQVAL" ) then
                        np = optarg.to_i
                        if ( np <= 0 ) then raise ErrorInvalidOptionArgument ; end
                        @nprocs = np
                    elsif ( flg_val == "BLKVAL" ) then
                        if ( i == 0 ) then                # check -np starts from argv[ 0 ]
                            np = args[ i + 1 ].to_i
                            if ( np <= 0 ) then raise ErrorInvalidOptionArgument ; end
                            @nprocs = np
                            i = i + 1
                        else
                            flg_opt = "NONE"
                            flg_val = "NONE"
                            optarg  = "NONE"
                            @comm_args = @comm_args + " " + args[ i ]
                        end
                    else
                        raise ErrorInvalidOptionArgument
                    end
                elsif ( flg_opt == "STARTERMEM" ) then
                    size = optarg.to_i
                    if ( size <= 0 ) then raise ErrorInvalidOptionArgument ; end
                    @starter_memsize = size
                elsif ( flg_opt == "NODEFILE" ) then
                    file = optarg
                    if ( file == "" ) then  raise ErrorInvalidOptionArgument ; end
                    @nodefile = file
                elsif ( flg_opt == "ENVNET" ) then
                    en = optarg
                    if ( en == "" ) then  raise ErrorInvalidOptionArgument ; end
                    @flg_envnetwork = en
                elsif ( flg_opt == "HELP" ) then
                    print_help( $stderr )
                    $stderr.printf( "help:\n" )
                    exit
                elsif ( flg_opt == "VERSION" ) then
                    $stderr.printf( "%s : version %s.\n", @myname, $version )
                    exit
                elsif ( flg_opt == "ERROR" ) then
                    raise ErrorInvalidOption
                else
                    raise ErrorInvalidOption
                end
                if $debug_mode then
                    if $debug_level > 200 then
                        printf( "opt: %s, %s, %s, (%s)\n", flg_opt, flg_val, optarg, args[ i ] )
                    end
                end
    
                i = i + 1
            end
        rescue ErrorInvalidOption
            $stderr.printf( "Error: invalid option: %s\n", args[ i ] )
            exit
        rescue ErrorInvalidOptionArgument
            $stderr.printf( "Error: invalid option argument: %s\n", args[ i ] )
            exit
        rescue 
        end

        if @nodefile then
            @flg_localmode = false
        end
    end

    #########################################################
    def set_taskid
        @arr_taskid = []
        for i in 0...@nprocs
            @arr_taskid << $taskid
        end
    end

    #########################################################
    def read_nodenames
        @arr_nodename = []
        if @flg_localmode then
            for i in 0...@nprocs do
                @arr_nodename << "localhost"
            end
        else
            begin
                IO.foreach( @nodefile ) do
                    |nodename|
                    nodename.chop!
                    @arr_nodename << nodename
                end
            rescue RuntimeError
                $stderr.printf( "%s: error, while processing nodefile %s\n", @myname, @nodefile )
                exit
            end
        end
        #if ( @arr_nodename.length < @nprocs ) then
        #    $stderr.printf( "%s: error. lines of nodename < nprocs: %d < %d\n",
        #                    @myname, @arr_nodename.length, @nprocs )
        #    exit
        #end
        #p nodenames
    end

    #########################################################
    def mult_nodenames
        if ( @arr_nodename.length < @nprocs ) then
            arr_nodename_read = @arr_nodename.clone
            @arr_nodename     = []
            ip = 0
            while ( ip < @nprocs ) do
                ipmod = ip % arr_nodename_read.length
                @arr_nodename << arr_nodename_read[ ipmod ]
                ip += 1
            end
            if $debug_mode then
                if $debug_level > 200 then
                    p "nodefile:", arr_nodename_read, "=>", @arr_nodename
                end
            end
            #$stderr.printf( "%s: specified nprocs %d < # of nodefile rows: %d (%s)\n",
            #                @myname, @nprocs, @arr_nodeip.length, @nodefile )
        end
    end

    #########################################################
    def resolv_nodenames
        @arr_nodeip = []
        @arr_nodename.each do |nodename|
        if @flg_localmode then
            @arr_nodeip << "127.0.0.1"
        else
            @arr_nodeip << Resolv.getaddress( nodename )
        end
        end
        #p nodeips
    end

    #########################################################
    def get_array_lport
        # @lst_for_gen_arr_lport[ @arr_nodeip[ node ] ] : Hash[ ip ] = current_max_portid
        @arr_lport = []
        for node in 0...@nprocs do
            ip = @lst_for_gen_arr_lport[ @arr_nodeip[ node ] ]
            if ip then
                @arr_lport << ip + 1
                @lst_for_gen_arr_lport[ @arr_nodeip[ node ] ] = ip + 1
            else
                @arr_lport << $portid_start
                @lst_for_gen_arr_lport[ @arr_nodeip[ node ] ] = $portid_start
            end
        end
    end

    #########################################################
    def get_array_rport_rhost
        if ( @flg_envnetwork == "UDP" ) || ( @flg_envnetwork == "udp" ) then
            get_array_rport_rhost_udp
        elsif ( @flg_envnetwork == "INFINIBAND" ) || ( @flg_envnetwork == "IB" ) ||
              ( @flg_envnetwork == "infiniband" ) || ( @flg_envnetwork == "ib" ) then
            get_array_rport_rhost_ib
        elsif ( @flg_envnetwork == "TOFU" ) || ( @flg_envnetwork == "tofu" ) then
            get_array_rport_rhost_tofu
        else
            $stderr.printf( "Error: %s: Network %s: not supported.\n", @myname, @flg_envnetwork )
            exit
        end
    end

    #########################################################
    def get_array_rport_rhost_udp
        @arr_rport = [] ; @arr_rhost = []
        for i in 0...@nprocs do @arr_rport << 0 ; @arr_rhost << " " ; end
        for node in 0...@nprocs do
            @arr_rport[ node ] = @arr_lport [ node / 2 ]
            @arr_rport[ node ] = @arr_lport [ node / 2 ]
            @arr_rhost[ node ] = @arr_nodeip[ node / 2 ]
            @arr_rhost[ node ] = @arr_nodeip[ node / 2 ]
        end
    end

    #########################################################
    def get_array_rport_rhost_ib
        @arr_rport = [] ; @arr_rhost = []
        for node in 0...(@nprocs-1) do
            @arr_rport << @arr_lport  [ node + 1 ]
            @arr_rhost << @arr_nodeip [ node + 1 ]
        end
        @arr_rport << @arr_lport [ 0 ]
        @arr_rhost << @arr_nodeip[ 0 ]
    end

    #########################################################
    def get_array_rport_rhost_tofu
        error_not_supported_network( @flg_envnetwork )
    end

    #########################################################
    def gen_ssh_commands
        @comms_ssh = []
        for ip in 0...@nprocs do
            comm = sprintf( "cd %s ; %s=%d %s=%d %s=%d %s=%d %s=%d %s=%s %s=%d %s",
                            @cwd,
                            $str_envmyrank, ip,
                            $str_envnprocs, @nprocs,
                            $str_envtaskid, @arr_taskid[ ip ],
                            $str_envlport,  @arr_lport [ ip ],
                            $str_envrport,  @arr_rport [ ip ],
                            $str_envrhost,  @arr_rhost [ ip ],
                            $str_envsmsize, @starter_memsize,
                                            @comm_args )
            if !@flg_localmode then
                #comm = "ssh " + @arr_nodename[ ip ] + " \"" + comm + "\" > zjobs" + sprintf( "%04d.out", ip ) + " 2>&1"
                #comm = $remoteshell + " " + @arr_nodename[ ip ] + " \"" + comm + "\""
                comm = $remoteshell + " " + @arr_nodeip[ ip ] + " \"" + comm + "\""
            end
            if ip == (@nprocs-1) then
                comm = comm + "\n"
            else
                comm = comm + " &"
            end
            @comms_ssh << comm
        end
    end

    #########################################################
    def exec_ssh_commands
        for ip in 0...@nprocs do
            system( @comms_ssh[ ip ] )
        end
    end
end

###############################################################################
###############################################################################
###### MAIN ###################################################################
###############################################################################
###############################################################################
acprun = Acprun.new( $envnetwork )

acprun.cwd = ENV[ "PWD" ]
envnetwork = ENV[ $str_envnetwork ]
if envnetwork then
    acprun.set_envnetwork( envnetwork )
end

acprun.parse_argv
if acprun.nodefile then
    if File.exist?( acprun.nodefile )
        ;
    else
        $stderr.printf( "Error: %s: could not open file : %s\n", acprun.myname, acprun.nodefile )
        exit
    end
end

acprun.set_taskid
acprun.read_nodenames
acprun.mult_nodenames
acprun.resolv_nodenames
acprun.get_array_lport
acprun.get_array_rport_rhost
acprun.gen_ssh_commands

###################
if $debug_mode then
    if $debug_level > 200 then
        printf( "nodefile: %s\n", @nodefile )
        printf( "Remaining args: %s\n", ARGV )
        for i in 0...(acprun.nprocs) do
            printf( "%20s%20s\n", acprun.arr_nodename[ i ], acprun.arr_nodeip[ i ] )
        end
        for i in 0...acprun.nprocs do
            printf( "lports: %d : %20s%20s%20s\n",
                     i, acprun.arr_lport[ i ], acprun.arr_rport[ i ], acprun.arr_rhost[ i ] )
        end
        printf( "comm args: %s\n", acprun.comm_args )
    end
    for i in 0...acprun.nprocs do
        printf( "%s\n", acprun.comms_ssh[ i ] )
    end
end

###################
if $execute_command then
    acprun.exec_ssh_commands
end

